@mixin render-triangles($obj, $color) {
  @for $i from 1 through 170 {
    .el#{$i} {
      background: rgba($color, random(10) / 10);
      transition-delay: random(700) + ms !important;

      @if length($obj) >= $i {
        clip-path: nth($obj, $i);
      } @else {
        clip-path: $void;
      }
    }
  }
}

@mixin font-face($ff, $fs, $fw, $url) {
  @font-face {
    font-family: "#{$ff}";
    font-style: $fs;
    font-weight: $fw;
    src: url("#{$url}.woff2") format("woff2"), url("#{$url}.woff") format("woff");
  }
}

@mixin font-settings($size, $height: 1.2) {
  font-size: $size;
  line-height: $height;
}

@mixin pseudo($display: inline-block, $content: "") {
  display: $display;
  content: $content;
}

@mixin bg-image($path: "", $size: cover, $repeat: no-repeat, $pos: center) {
  background-image: url($path);
  // background-color: rgba(9, 9, 9, 0.9);
  background-size: $size;
  background-repeat: $repeat;
  background-position: $pos;
}

@mixin center-flex($type: "all") {
  display: flex;

  @if $type== "all" {
    justify-content: center;
    align-items: center;
  } @else if $type== "hor" {
    justify-content: center;
  } @else if $type== "ver" {
    align-items: center;
  }
}
@mixin transition($property) {
  transition: $property 0.2s linear;
}
@mixin generate-pseudo-icons($baseclass, $list, $path, $ext) {
  @each $icon in $list {
    .#{$baseclass}#{$icon}::before {
      background-image: url(#{$path}#{$icon}.#{$ext});

      @media (min-resolution: 192dpi), (min-resolution: 2dppx) {
        background-image: url(#{$path}#{$icon}@2x.#{$ext});
      }
    }
  }
}

@mixin projects-image($list) {
  @each $image in $list {
    .#{$image}-image {
      @include bg-image("../images/projects/#{$image}-photo.png");
    }
  }
}

@mixin retina-image() {
  @media (min-resolution: 192dpi), (min-resolution: 2dppx) {
    @content;
  }
}
